Recursion is the idea that a function calls itself. That is all there is to it. It’s used to take a big problem and start breaking it down into smaller and smaller pieces (“Divide and Conquer”) and continuing to feed their solutions back into the original function until some sort of answer is achieved and the whole chain unwinds.

From the Wikipedia entry on Divide and Conquer Algorithms (http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm):

  "In computer science, divide and conquer (D&C) is an important algorithm design paradigm based on multi-branched recursion. A divide and conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same (or related) type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem."

There’s also a right and wrong way to use recursion. The fact is, any problem you can solve recursively, you can also solve using the iterators that you know and love. If you find yourself saying “why didn’t I just use a while loop here?” then you probably should have. You won’t often end up using a recursive solution to a problem, but you should get a feel for when it might be a good idea. Some problems also break down into far too many pieces and totally overwhelm your computer’s memory. There’s a balance.

In this brief lesson, you’ll get a chance to learn more about when and how to use recursion and then in the next project you will get the chance to apply some of that (since it probably won’t really stick until you’ve had a chance to try it).

Resources

  https://javascript.info/recursion
  https://www.youtube.com/watch?v=6oDQaB2one8
  https://youtu.be/LteNqj4DFD8?t=340
  https://www.youtube.com/watch?v=mz6tAJMVmfM
  http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm#Implementation_issues
  https://www.codingame.com/playgrounds/5422/js-interview-prep-recursion

Additional Resources

  http://webdocs.cs.ualberta.ca/~holte/T26/efficient-rec.html
  https://www.javascripttutorial.net/javascript-recursive-function/
  https://pythontutor.com/render.html#code=function%20calcFactorial%28num%29%20%7B%0A%20%20%20%20if%20%28num%20%3D%3D%3D%201%29%20%7B%0A%20%20%20%20%20%20%20%20return%201%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20num%20*%20calcFactorial%28num%20-%201%29%3B%0A%7D%0A%0AcalcFactorial%285%29%3B&cumulative=false&curInstr=2&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=js&rawInputLstJSON=%5B%5D&textReferences=false
  https://www.youtube.com/watch?v=IJDJ0kBx2LM&t=2333s
  https://www.youtube.com/watch?v=ngCos392W4w