By this point, you will have learned and had a chance to practice the most common object-creation and organization patterns in JavaScript. But that is just the tip of the iceberg. More important than learning the syntax for factory functions or modules is figuring out how to use them effectively.

This whole series of lessons has been about the “Object Oriented Programming” paradigm (OOP). The basics of creating objects and classes are relatively straightforward. But it is not straightforward to decide what to put in each object, or when to make a new object, or when to let an object ‘inherit’ from another one.

Luckily there are several concepts and principles that can guide us into making good decisions when it comes to our objects. This lesson is an introduction to the most important of those concepts. Keep in mind that there is not usually a very clear answer to your application design questions. Some patterns and ideas are obviously better than others, but there is often some trade-off when deciding where to put a specific function. In other words… these principles are not rules- they’re helpful guidelines.  

As you read these resources, it might help to go back to some projects you’ve already done and think about how what you’ve written measures up to the examples you see. And of course, as you move on, keep these things in mind when crafting new projects.

Single responsibility

    As you craft your objects, one of the most important things to remember is the Single Responsibility Principle which states that a class (or object or module... you get the point) should only have one responsibility. This doesn't mean that an object can only do one thing, but it does mean that everything an object does should be part of one responsibility.

    Here's a really common example. Most of our code has functions to update and write things to the DOM in addition to our application logic. It's a really good idea to separate your DOM stuff from the application logic.

    Here we have a function that should check if a game over condition has been met. There are two issues with this:

        function isGameOver() {

        // game over logic goes here!

        if (gameOver) {
                const gameOverDiv = document.createElement('div');
                gameOverDiv.classList.add('game-over');
                gameOverDiv.textContent = `${this.winner} won the game!`;
                document.body.appendChild(gameOverDiv);
            }
        }

    The first issue is that the function (and the module it's in) should not directly be the one to manipulate the DOM. You should extract all DOM manipulation into its own module and use it like so:

        function isGameOver() {

        // game over logic goes here!

        if (gameOver){
                DOMStuff.gameOver(this.winner);
            }
        }

    The second issue remaining is that the isGameOver function should only be responsible for checking if the gameOver condition is met. Based on isGameOver return value, the function that handles the game loop should be responsible for deciding whether to call DOMStuff.gameOver(this.winner) or not.

    Another way to think about the Single Responsibility is that a given method/class/component should have a single reason to change. Otherwise, if an object is trying to have multiple responsibilities, changing one aspect might affect another.

    The Single Responsibility Principle is the first of a commonly found set of 5 design principles called the SOLID principles. You will read more about these principles in the assignment articles below.

Loosely coupled objects

    Obviously, all of our objects are intended to work together to form our final application. You should take care, however, to make sure that your individual objects can stand alone as much as possible. Tightly coupled objects are objects that rely so heavily on each other tht removing or changing one will mean that you have to completely change another one - a real bummer.

    This one is related pretty strongly to 'Single Responsibility' but takes a different angle. As an example, if we were writing a game and wanted to completely change how the User Interface worked, we should be able to do that without completely reworking the game logic. So we should be able to start off writing our game using primarily console.log()s and then add in a bunch of DOM functions later without touching the game logic.

Resources

    https://duncan-mcardle.medium.com/solid-principle-1-single-responsibility-javascript-5d9ce2c6f4a5
    https://www.youtube.com/playlist?list=PLZlA0Gpn_vH9kocFX7R7BAe_CvvOCO_p9
    https://web.archive.org/web/20170215102316/http://www.innoarchitech.com:80/scalable-maintainable-javascript-coupling
    https://www.youtube.com/watch?v=wfMtDGfHWpA

Additional Resources

    http://www.poodr.com/
    https://sandimetz.com/products
    https://www.ayweb.dev/blog/building-a-house-from-the-inside-out
    https://www.youtube.com/watch?v=q1qKv5TBaOA