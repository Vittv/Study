Before we dive further into code, we are going to take a moment to improve your editor setup and overall productivity. Doing this now will make things much easier for you going forward. This lesson will give you some information about code style, and then give you some tools to help you maintain consistent code-style throughout your projects. In some cases it can even help adjust things like indentation for you!

Style guides

	Code style is important! Having a consistent set of style rules for things such as indentation or preferred quote style makes your code more maintainable and easier to read. There are several popular JavaScript style guides on the net that set standards for these types of things, and a little time spent looking through them will make you a better developer. Have a little look at some popular style guides for an idea of what sort of things can be done to improve consistency:

	The Airbnb Style Guide (https://github.com/airbnb/javascript) is one of the most popular. It is also very well formatted and easy to read.

	There is also a JavaScript style guide used at Google. (https://google.github.io/styleguide/jsguide.html)

	The JavaScript Standard Style. (https://standardjs.com/rules.html)

Linting

	The style guides we mentioned above are full of really helpful advice for formatting, organizing and composing your code. But there are a lot of rules - it can be difficult to internalize them all. Linters are tools that will scan your code with a set of style rules and will report any errors to you that they find. In some cases, they can even auto-fix the errors! There are many linters that exist for JavaScript but by far the most common one is ESLint. (https://eslint.org/)

	ESLint is installed as a dev dependency in your project which will allow you to run checks on any of your files via the command line. ESLint's official "Getting Started" page (https://eslint.org/docs/user-guide/getting-started) is a good place to start which covers installation and basic configuration. You will also want to look at the docs on configuring ESLint (https://eslint.org/docs/latest/use/configure/) for a list of options that you can change, such as including or excluding certain folders or files, and details about specific rules.

	ESLint commands

		Install

			npm init @eslint/config@latest
	
		Specific config

			# use `eslint-config-xo` shared config - npm 7+
			npm init @eslint/config@latest -- --config eslint-config-xo

			Note: npm init @eslint/config assumes you have a package.json file already. If you don’t, make sure to run npm init or yarn init beforehand.

		Run ESLint

			npx eslint yourfile.js 

			(Since it's an npx command, it can also be made into an npm script)

	ESLint configuration

		When you run npm init @eslint/config, you’ll be asked a series of questions to determine how you’re using ESLint and what options should be included. After answering these questions, you’ll have an eslint.config.js (or eslint.config.mjs) file created in your directory.

		For example, one of the questions is “Where does your code run?” If you select “Browser” then your configuration file will contain the definitions for global variables found in web browsers. Here’s an example:

			import { defineConfig } from "eslint/config";
			import globals from "globals";
			import js from "@eslint/js";

			export default defineConfig([
				{ files: ["**/*.js"], languageOptions: { globals: globals.browser } },
				{ files: ["**/*.js"], plugins: { js }, extends: ["js/recommended"] },
			]);

		The "js/recommended" configuration ensures all of the rules marked as recommended on the rules page (https://eslint.org/docs/latest/rules) will be turned on. Alternatively, you can use configurations that others have created by searching for “eslint-config” on npmjs.com (https://www.npmjs.com/search?q=eslint-config). ESLint will not lint your code unless you extend from a shared configuration or explicitly turn rules on in your configuration.

		You can configure files individually by defining a new object with a rules key, as in this example:

			import { defineConfig } from "eslint/config";
			import js from "@eslint/js";

			export default defineConfig([
				{ files: ["**/*.js"], plugins: { js }, extends: ["js/recommended"] },

				{
					rules: {
						"no-unused-vars": "warn",
						"no-undef": "warn",
					},
				},
			]);

		The names "no-unused-vars" and "no-undef" are the names of rules in ESLint. The first value is the error level of the rule and can be one of these values:

			"off" or 0 - turn the rule off

			"warn" or 1 - turn the rule on as a warning (doesn’t affect exit code)

			"error" or 2 - turn the rule on as an error (exit code will be 1)

		The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see configuration docs (https://eslint.org/docs/latest/use/configure/)).

	ESLint global install

		It is also possible to install ESLint globally, rather than locally, using npm install eslint --global. However, this is not recommended, and any plugins or shareable configs that you use must still be installed locally if you install ESLint globally.

	ESLint v9 and flat config support

		The above ESLint doc links take you to the docs for v9, which was released in April 2024. v9 came with a lot of big changes, including forcing all ESLint config files to use the “flat config” format (eslint.config.(m|c)js).

		Because of these changes, some community plugins like eslint-config-airbnb-base (https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base) (which makes ESLint use Airbnb’s ruleset) have not yet been able to release a version that supports v9 or flat config.

		For the time being, if you wish to use airbnb’s style guide with ESLint, you will need to use ESLint’s v8.57 version of the docs (https://eslint.org/docs/v8.x/use/getting-started) and make sure you use one of the older eslintrc configuration file formats (https://eslint.org/docs/v8.x/use/configure/configuration-files), not the newer flat config format.

Formatters

	Formatters are awesome. They are similar to linters, but serve a slightly different function. Formatters take your JavaScript code and then automatically format it according to a set of rules. Unlike linters, they do not look for style errors, but specifically target the layout of your code, making intelligent decisions about things like spaces, indentation levels and line-breaks.

	As usual, there are multiple formatters out there. Prettier (https://prettier.io/) is a very popular choice that is highly opinionated. Besides a few options, most of its formatting decisions are not customizable. Since many of these decisions have been made for you, this reduces the time spent deciding on things like indentation size or spacing, and more time on the problems that actually matter.

	Like with ESLint, Prettier is installed as a dev dependency in your project, so read Prettier's installation guide (https://prettier.io/docs/en/install.html) for instructions on how to do this. While it normally runs with its default rules, you can also change any of its settings in a Prettier configuration file (https://prettier.io/docs/configuration).

	Using Prettier makes coding faster and easier! You don't have to worry about nailing things like indentation, or remembering every semi-colon because it will take care of those details for you.

IDE extensions for linting and formatting

	Linters and formatters are typically packages you install in a project and use via the command line. However, many popular tools also have IDE extensions, and ESLint and Prettier both have extensions for Visual Studio Code that can make linting and formatting much more convenient on your machine.

	For example, when installed, the ESLint extension (https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) can provide linter warnings and errors as color-coded squiggly lines directly in the open file and even give you details about the specific rule(s) broken, all without you having to run ESLint in the command line. The Prettier extension (https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) allows you to format a file with an IDE command or custom keyboard shortcut, again without having to run a command in the terminal.

	It is important that you still have the packages installed as dependencies in your project along any configuration files. The extensions can have fallback rules set, but if they detect the respective package and configuration file in your project, they will use those rules and the package version installed. That way, projects always hold the source of truth for what linting and formatting rules should be applied, and should you ever work on other projects, you're less likely to introduce unwanted style changes from your local settings.

	In summary, the extensions are great tools for convenience, but they should not be used as a source of truth for a project's linting or formatting setup.

Using ESLint and Prettier together

	We highly recommend that you install ESLint and Prettier and use them for all future projects. It will make your code easier to read, both for yourself and for anyone else looking at it.

	For most people using the default ESLint ruleset, there will be no special setup needed apart from installing both of them.

	Some community plugins, such as eslint-config-airbnb-base (https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base), turn on some stylistic rules that may clash with what Prettier formats. If you wish to use a plugin like eslint-config-airbnb-base and Prettier together, you will also need to install eslint-config-prettier (https://github.com/prettier/eslint-config-prettier) which will turn off any of the ESLint rules that clash with Prettier. If you are using the default ESLint ruleset, you will not need this.

	Adding setup to template repositories

		Recall template repositories (https://www.theodinproject.com/lessons/node-path-javascript-revisiting-webpack#template-repositories) ? You can include linter and formatter setup in any of your templates to make things quicker and easier in the future!		

Resources

	https://hackernoon.com/how-linting-and-eslint-improve-code-quality-fa83d2469efe
	https://www.youtube.com/watch?v=hkfBvpEfWdA
	https://prettier.io/playground