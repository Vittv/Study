Test Driven Development, or TDD for short, is a big deal in the modern development landscape. This is a concept that we introduced way back in our Fundamentals section with our JavaScript Exercises. The main idea is that you start working on your code by writing automated tests before writing the code that is being tested. There are tons of benefits to working like this, all of which will be discussed in the resources below.

There are many test-running systems available in JavaScript: Mocha (https://mochajs.org/), Jasmine (https://jasmine.github.io/), Tape (https://github.com/substack/tape) and Jest (https://jestjs.io/) to name a few. Fortunately, the syntax for each one is very similar. They all have their own set of special features, but the basic syntax is almost identical, so in the end it doesnâ€™t matter which one you use. In fact, picking which library to use for this curriculum has been quite tricky!

This lesson is going to center around Jest. We have found that it has one of the best resources for explaining JavaScript testing, as well as fantastic documentation. In the end, writing tests is less about the syntax and more about the TDD philosophy. The most important issues are knowing why we write tests and what we test rather than how.

Resources

  https://web.archive.org/web/20211123190134/http://godswillokwara.com/index.php/2016/09/09/the-importance-of-test-driven-development/
  https://www.youtube.com/playlist?list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr
  https://jestjs.io/docs/getting-started
  https://jestjs.io/docs/using-matchers
  https://jrsinclair.com/articles/2016/one-weird-trick-that-will-change-the-way-you-code-forever-javascript-tdd/

Additional Resources

  https://www.youtube.com/watch?v=Jv2uxzhPFl4