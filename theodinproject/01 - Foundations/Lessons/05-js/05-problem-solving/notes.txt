Understand the problem

    The first step to solving a problem is understanding exactly what the problem is. If you don’t understand the problem, you won’t know when you’ve successfully solved it and may waste a lot of time on a wrong solution.

    To gain clarity and understanding of the problem, write it down on paper, reword it in plain English until it makes sense to you, and draw diagrams if that helps. When you can explain the problem to someone else in plain English, you understand it.


Plan

    - Does your program have a user interface? What will it look like? What functionality will the interface have? Sketch this out on paper.

    - What inputs will your program have? Will the user enter data or will you get input from somewhere else?

    - What’s the desired output?

    - Given your inputs, what are the steps necessary to return the desired output?

    The last question is where you will write out an algorithm to solve the problem. You can think of an algorithm as a recipe for solving a particular problem. It defines the steps that need to be taken by the computer to solve a problem in pseudocode.


Pseudocode

    Pseudocode is writing out the logic for your program in natural language instead of code. It helps you slow down and think through the steps your program will have to go through to solve the problem.

    | When the user inputs a number
    | Initialize a counter variable and set its value to zero
    | While counter is smaller than user inputted number increment the counter by one
    | Print the value of the counter variable


Divide and conquer

    Many beginners try to solve the big problem in one go. Don’t do this.
    Tldr: Start with something simple and built on top of it. Solve a bunch of subproblems, until together, they solve a big problem. Try not to take too many tasks at once or solve everything with one single algorithm. Tackle things as they come and solve each part separately before coming up with the big solution. Tiny little fixes sum up to be the desired big solution.

Solving Fizz Buzz

    Understanding the problem

    "Write a program that takes a user’s input and prints the numbers from one to the number the user entered. However, for multiples of three print Fizz instead of the number and for the multiples of five print Buzz. For numbers which are multiples of both three and five print FizzBuzz."


    Writing the pseudocode

    | When a user inputs a number
    | Loop from 1 to the entered number
    | If the current number is divisible by 3 then print "Fizz"
    | If the current number is divisible by 5 then print "Buzz"
    | If the current number is divisible by 3 and 5 then print "FizzBuzz"
    | Otherwise print the current number


    Dividing and conquering

        First subproblem

            The first subproblem we can solve is getting input from the user.

            let answer = parseInt(prompt("Please enter the number you would like to FizzBuzz up to: "));

            (We wrap it in parseInt so a number is returned, otherwise a string would've been returned)

        Second subproblem

            “Loop from 1 to the entered number”. There are many ways to do this in JavaScript. One of the common ways - that you actually see in many other languages like Java, C++, and Ruby - is with the for loop:

            let answer = parseInt(prompt("Please enter the number you would like to FizzBuzz up to: "));

            for (let i = 1; i <= answer; i++) {
                console.log(i);
            }

            If you haven’t seen this before and it looks strange, it’s actually straightforward. We declare a variable i and assign it 1: the initial value of the variable i in our loop. The second clause, i <= answer is our condition. We want to loop until i is greater than answer. The third clause, i++, tells our loop to increment i by 1 every iteration. As a result, if the user inputs 10, this loop would print numbers 1 - 10 to the console.

            note !: Most of the time, programmers find themselves looping from 0. Due to the needs of our program, we’re starting from 1

        Third subproblem

            If the current number is divisible by 3 then print Fizz.

            let answer = parseInt(prompt("Please enter the number you would like to FizzBuzz up to: "));

            for (let i = 1; i <= answer; i++) {
                if (i % 3 === 0) {
                    console.log("Fizz");
                } else {
                    console.log(i);
                }
            }

            After this change the problem will now output this when you run it and the user inputs 10:

            1
            2
            Fizz
            4
            5
            Fizz
            7
            8
            Fizz
            10

        Fourth subproblem

            If the current number is divisible by 5 then print Buzz.

            let answer = parseInt(prompt("Please enter the number you would like to FizzBuzz up to: "));

            for (let i = 1; i <= answer; i++) {
                if (i % 3 === 0) {
                    console.log("Fizz");
                } else if (i % 5 === 0) {
                    console.log("Buzz");
                } else {
                    console.log(i);
                }
            }

            When you run the program now, you should see this output if the user inputs 10:

            1
            2
            Fizz
            4
            Buzz
            Fizz
            7
            8
            Fizz
            Buzz

        Fifth subproblem

            If the current number is divisible by 3 and 5 then print FizzBuzz.

            let answer = parseInt(prompt("Please enter the number you would like to FizzBuzz up to: "));

            for (let i = 1; i <= answer; i++) {
                if (i % 3 === 0 && i % 5 === 0) {
                    console.log("FizzBuzz");
                } else if (i % 3 === 0) {
                    console.log("Fizz");
                } else if (i % 5 === 0) {
                    console.log("Buzz");
                } else {
                    console.log(i);
                }
            }

            We’ve had to move the conditionals around a little to get it to work. The first condition now checks if i is divisible by 3 and 5 instead of checking if i is just divisible by 3. We’ve had to do this because if we kept it the way it was, it would run the first condition if (i % 3 === 0), so that if i was divisible by 3, it would print Fizz and then move on to the next number in the iteration, even if i was divisible by 5 as well.

            With the condition if (i % 3 === 0 && i % 5 === 0) coming first, we check that i is divisible by both 3 and 5 before moving on to check if it is divisible by 3 or 5 individually in the else if conditions.

            The program is now complete! If you run it now you should get this output when the user inputs 20:

            1
            2
            Fizz
            4
            Buzz
            Fizz
            7
            8
            Fizz
            Buzz
            11
            Fizz
            13
            14
            FizzBuzz
            16
            17
            Fizz
            19
            Buzz

Refer to fizzbuzzproblem.html to test it yourself on any browser console.