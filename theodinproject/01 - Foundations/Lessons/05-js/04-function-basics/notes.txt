We are studying functions

function favoriteAnimal(animal) {
    return animal + " is my favorite animal!"
}

console.log(favoriteAnimal('Goat'))

In JavaScript, parameters are the items listed between the parentheses () in the function declaration. Function arguments are the actual values we decide to pass to the function.

In the example above, the function definition is written on the first line: function favoriteAnimal(animal). The parameter, animal, is found inside the parentheses. We could just as easily replace animal with pet, x, or blah. But in this case, naming the parameter animal gives someone reading our code a bit of context so that they don’t have to guess what animal may eventually contain.

By putting animal inside the parentheses of the favoriteAnimal() function, we are telling JavaScript that we will send some value to our favoriteAnimal function. This means that animal is just a placeholder for some future value. But what value are we sending?

The last line, favoriteAnimal('Goat'), is where we are calling our favoriteAnimal function and passing the value 'Goat' inside that function. Here, 'Goat' is our argument. We are telling the favoriteAnimal function, “Please send 'Goat' to the favoriteAnimal function and use 'Goat' wherever the ‘animal’ placeholder is.” Because of the flexibility that using a parameter provides, we can declare any animal to be our favorite.

function sum(parameter1, parameter2) { // parameters
    return parameter1 + parameter2;
}

sum(1, 2) // arguments


Default parameters

    If you're writing a function and want to support optional parameters, you can specify default values by adding = after the name of the parameter, followed by the default value:

    function hello(name = "Chris") {
    console.log(`Hello ${name}!`);
    }

    hello("Ari"); // Hello Ari!
    hello(); // Hello Chris!


Anonymous functions and arrow functions

    Anonymous 

        (function () {
        alert("hello");
        });

        This is called an anonymous function, because it has no name. You'll often see anonymous functions when a function expects to receive another function as a parameter. In this case, the function parameter is often passed as an anonymous function.

        Note: This form of creating a function is also known as function expression. Unlike function declarations, function expressions are not hoisted.

        For example, let's say you want to run some code when the user types into a text box. To do this you can call the addEventListener() function of the text box. This function expects you to pass it (at least) two parameters:

        - the name of the event to listen for, which in this case is keydown
        - a function to run when the event happens.


        When the user presses a key, the browser will call the function you provided, and will pass it a parameter containing information about this event, including the particular key that the user pressed:

        function logKey(event) {
        console.log(`You pressed "${event.key}".`);
        }

        textBox.addEventListener("keydown", logKey);


        Instead of defining a separate logKey() function, you can pass an anonymous function into addEventListener():

        textBox.addEventListener("keydown", function (event) {
        console.log(`You pressed "${event.key}".`);
        });


    Arrow functions

        If you pass an anonymous function like this, there's an alternative form you can use, called an arrow function. Instead of function(event), you write (event) =>:

        textBox.addEventListener("keydown", (event) => {
        console.log(`You pressed "${event.key}".`);
        });

        If the function only takes one parameter, you can omit the parentheses around the parameter:

        textBox.addEventListener("keydown", event => {
        console.log(`You pressed "${event.key}".`);
        });


        Finally, if your function contains only one line that's a return statement, you can also omit the braces and the return keyword and implicitly return the expression. In the following example, we're using the map() method of Array to double every value in the original array:

        const originals = [1, 2, 3];

        const doubled = originals.map(item => item * 2);

        console.log(doubled); // [2, 4, 6]


        The map() method takes each item in the array in turn, passing it into the given function. It then takes the value returned by that function and adds it to a new array.

        So in the example above, item => item * 2 is the arrow function equivalent of:

        function doubleItem(item) {
        return item * 2;
        }

        You can use the same concise syntax to rewrite the addEventListener example.

        textBox.addEventListener("keydown", (event) =>
        console.log(`You pressed "${event.key}".`),
        );

        In this case, the value of console.log(), which is undefined, is implicitly returned from the callback function.


Scope

    Scope is simple:

    If something's inside a function, it is limited to that function and can't be read or used outside of that

    A function can be used in other places, but data created inside the function specifically can'take

    Example:

    output(x);

    function a() {
    const y = 2;
    output(z);
    }

    function b() {
    const z = 3;
    output(y);
    }

    a();
    b();

    These two would throw an error because they're using data from each other's functions

    If instead they used their own declared data inside of them, it would work because they're using data accessible in the local scope (y, z)

    function a() {
    const y = 2;
    output(z);
    }

    function b() {
    const z = 3;
    output(y);
    }

    And if they used data declared outside of all functions (global scope)

    output(x);


    function a() {
    const y = 2;
    output(x);
    }

    function b() {
    const z = 3;
    output(x);
    }


    it would work because they're using data that's accessible in the global scope (output(x));