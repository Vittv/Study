Js is dynamically typed, so basically things are automatically categorized, based on their value, without the need to tell the computer what they are

if you do

    let something = 2
the computer knows that is a number variable

Infinity represents infinity and it is bigger than any other number

NaN is a computational error, it usually means something is undefined or incorrect in a mathematical operation
NaN is sticky, anything that caused a NaN or involves a NaN will result in a NaN

the only exception is when you do

NaN ** 0, which is 1


Strings can be assigned with ' or ", they're the same
if you use ` instead, you can embed variables inside strings

    let name = "John";

    alert(`Hello ${name}!`) // Hello, John!

you can also use it for operations

    alert(`The result is ${1 + 2}`) // The result is 3


The boolean type has two values: true and false

true means yes, correct
false means no, incorrect

you can either store those values in variables for future use
or generate them dynamically by applying logic

storing:

    let nameFieldChecked = true; // yes, name field is checked
    let ageFieldChecked = false; // no, age field is not checked

logic:

    let isGreater = 4 > 1;
    alert( isGreater ); // true (the comparison result is "yes")


Null means nothing, empty or value unknown



Undefined means value not assigned

    let age;
    alert(age); // shows "undefined"


The object type is special

All other types are called “primitive” because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities


The typeof operator returns the type of the operand. It’s useful when we want to process values of different types differently or just want to do a quick check.

A call to typeof x returns a string with the type name:

typeof undefined // "undefined"

    typeof 0 // "number"

    typeof 10n // "bigint"

    typeof true // "boolean"

    typeof "foo" // "string"

    typeof Symbol("id") // "symbol"

    typeof Math // "object"  (1)

    typeof null // "object"  (2)

    typeof alert // "function"  (3)

The last three lines may need additional explanation:

    Math is a built-in object that provides mathematical operations. We will learn it in the chapter Numbers. Here, it serves just as an example of an object.

    The result of typeof null is "object". That’s an officially recognized error in typeof, coming from very early days of JavaScript and kept for compatibility. Definitely, null is not an object. It is a special value with a separate type of its own. The behavior of typeof is wrong here.

    The result of typeof alert is "function", because alert is a function. We’ll study functions in the next chapters where we’ll also see that there’s no special “function” type in JavaScript. Functions belong to the object type. But typeof treats them differently, returning "function". That also comes from the early days of JavaScript. Technically, such behavior isn’t correct, but can be convenient in practice.
    

String Manipulation

    The length property returns the length of a string

        let text= "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        let length = text.length; // 26


    There are 4 methods for extracting string characters:

        - The at(position) Method
        - The charAt(position) Method
        - The charCodeAt(position) Method
        - Using property access [] like in arrays


    The charAt() method returns the character at a specified index (position) in a string:

        let text = "HELLO WORLD";
        let char = text.charAt(0); // H

    The charCodeAt() method returns the code of the character at a specified index in a string:

    The method returns a UTF-16 code (an ineger between 0 and 65535)

        let text = "HELLO WORLD";
        let char = text.charCodeAt(0);


    String at()

        const name = "yup";
        let letter = name.at(2);

        const name = "yup";
        let letter = name[2];

    Both will return the character at a specified index in a string


    Property Acesss []

        let text = "HELLO WORLD";
        let char = text[0];


    Property access might be a little unpredictable:

       - It makes strings look like arrays (but they are not)
       - If no character is found, [ ] returns undefined, while charAt() returns an empty string.
       - It is read only. str[0] = "A" gives no error (but does not work!)

       let text = "HELLO WORLD";
       text[0] = "A"; // Gives no error, but does not work


    Extracting String Parts

    There are 3 methods for extracting a part of a string:

       - slice(start, end)
       - substring(start, end)
       - substr(start, length)


    slice()

    slice() extracts a part of a string and returns the extracted part in a new string

    The method takes 2 parameters: start position, and end position (end not included)

    Slice out a portion of a string from position 7 to 13;

        let text = "Apple, Banana, Kiwi";
        let part = text.slice(7, 13); // Banana


    <JavaScript counts positions from zero>

        First position is 0
        Second position is 1

    
    If you omit the second parameter, the method will slice out the rest of the string:

        let text = "Apple, Banana, Kiwi";
        let part = text.slice(7); // Banana, Kiwi

    If a parameter is negative, the position is counted from the end of the string: 

        let text = "Apple, Banana, Kiwi";
        let part = text.slice(-12); // Banana, Kiwi

    This example slices out a portion of a string from position -12 to position -6:

        let text = "Apple, Banana, Kiwi";
        let part = text.slice(-12, -6); // Banana


    substring()

    substring() is similar to slice()

    The difference is that start and end values less than 0 are treated as 0 in substring().

        let str = "Apple, Banana, Kiwi";
        let part = str.substring(7, 13); // Banana

    If you omit the second parameter, substring() will slice out the rest of the string.


    substr()

    substr() is similar to slice()

    The difference is that the second parameter specifies the length of the extracted part.

        let str = "Apple, Banana, Kiwi";
        let part = str.substr(7, 6); // Banana

    If you omit the second parameter, substr() will slice out the rest of the string.

    If the first parameter is negative, the position counts from the end of the string.

        let str = "Apple, Banana, Kiwi";
        let part = str.substr(-4);


    Upper and Lower Case

    A string is converted to upper case with toUpperCase():

    A string is converted to lower case with toLowerCase():

        let text1 = "Hello World!";
        let text2 = text1.toUpperCase();

        let text1 = "Hello World!";       // String
        let text2 = text1.toLowerCase();  // text2 is text1 converted to lower

    trim()

    Removes whitespace from both sides of a string


    trimStart()

    Removes whitespace only from the start of a string

    trimEnd()

    Same but for the end of the string
    

    repeat()

    The repeat() method returns a string with a number of copies of a string.

    The repeat() method returns a new string.

    The repeat() method does not change the original string.

        string.repeat(count)


    replace()


    The replace() method replaces a specified value with another value in a string:

        let text = "Please visit Microsoft!";
        let newText = text.replace("Microsoft", "W3Schools");


    It will always replace the first match
    It is case sensitive unless you use /i

        let text = "Please visit Microsoft!";
        let newText = text.replace(/MICROSOFT/i, "W3Schools");


    replaceAll()

    The replaceAll() method allows you to specify a regular expression instead of a string to be replaced.

    If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown.

        text = text.replaceAll("Cats","Dogs");
        text = text.replaceAll("cats","dogs");

        text = text.replaceAll(/Cats/g,"Dogs");
        text = text.replaceAll(/cats/g,"dogs");


    split()


    A string can be converted to an array with the split() method

        text.split(",")    // Split on commas
        text.split(" ")    // Split on spaces
        text.split("|")    // Split on pipe

    If the separator is omitted, the returned array will contain the whole string in index [0].

    If the separator is "", the returned array will be an array of single characters


Conditionals

    Comparisons

        They are written like this:

            -  Greater/less than: a > b, a < b.
            -  Greater/less than or equals: a >= b, a <= b.
            -  Equals: a == b, please note the double equality sign == means the equality test, while a single one a = b means an assignment.
            -  Not equals: In maths the notation is ≠, but in JavaScript it’s written as a != b.

        All comparison operators return a boolean value:

        - true – means “yes”, “correct” or “the truth”.
        - false – means “no”, “wrong” or “not the truth”.

            alert( 2 > 1 );  // true (correct)
            alert( 2 == 1 ); // false (wrong)
            alert( 2 != 1 ); // true (correct)   

        A comparison result can be assigned to a variable, just like any value:

            let result = 5 > 4; // assign the result of the comparison
            alert( result ); // true


        String comparison

            To see whether a string is greater than another, JavaScript uses the so-called “dictionary” or “lexicographical” order.

            In other words, strings are compared letter-by-letter.

                alert( 'Z' > 'A' ); // true
                alert( 'Glow' > 'Glee' ); // true
                alert( 'Bee' > 'Be' ); // true

            This is based on the Unicode order, not the actual alphabet


        Comparison of different types

            When comparing values of different types, JavaScript converts the values to numbers.

            alert( '2' > 1 ); // true, string '2' becomes a number 2
            alert( '01' == 1 ); // true, string '01' becomes a number 1

            For boolean values, true becomes 1 and false becomes 0

            alert( true == 1 ); // true
            alert( false == 0 ); // true


        Strict equality

            A regular equality check == has a problem. It cannot differentiate 0 from false:

            alert( 0 == false ); // true

            The same thing happens with an empty string:

            alert( '' == false ); // true

            This happens because operands of different types are converted to numbers by the equality operator ==. An empty string, just like false, becomes a zero.


            A strict equality operator === checks the equality without type conversion.

            In other words, if a and b are of different types, then a === b immediately returns false without an attempt to convert them.

            alert( 0 === false ); // false, because the types are different


            There is also a “strict non-equality” operator !== analogous to !=.


        Comparison with null and undefined

            There’s a non-intuitive behavior when null or undefined are compared to other values.

            For a strict equality check ===

            These values are different, because each of them is a different type

            alert( null === undefined ); // false


            For a non-strict check ==

            There’s a special rule. These two are a “sweet couple”: they equal each other (in the sense of ==), but not any other value.

            alert( null == undefined ); // true


        Logical Operators

            || = or

                result = a || b;

                it finds the first true value
                so if you have
                
                    x || y || z || c

                it will stop at the first TRUE option, not necessarily cycling through all the options 


            && = and

                result = a && b;

                In classical programming, AND returns true if both operands are truthy and false otherwise:

                    alert( true && true );   // true
                    alert( false && true );  // false
                    alert( true && false );  // false
                    alert( false && false ); // false  

                given multiple AND's it will find the first FALSE value


            ! = not

                result = !value;

                The operator accepts a single argument and does the following:

                   - Converts the operand to boolean type: true/false.
                   - Returns the inverse value.


    Conditional Statements

        - Use if to specify a block of code to be executed, if a specified condition is true
        - Use else to specify a block of code to be executed, if the same condition is false
        - Use else if to specify a new condition to test, if the first condition is false
        - Use switch to specify many alternative blocks of code to be executed


        if (condition) {
        /* code to run if condition is true */
        } else {
        /* run some other code instead */
        }

        if (condition1) {
            /* runs code if condition1 is met
        }
        else if (condition2) {
           /* runs code if condition1 isn't met and condition2 is met
        }
        else {
           /* runs code if none of the above were met
        }


        Conditional operator '?'

        The operator is represented by a question mark ?. Sometimes it’s called “ternary”, because the operator has three operands. It is actually the one and only operator in JavaScript which has that many.

        let result = condition ? value1 : value2;

        let accessAllowed = (age > 18) ? true : false;

        You can hide the parenthesis around "age > 18" and it will work the same


        Switch

        Takes a single expression/value as an input, and then looks through several choices until they find one that matches that value, executing the corresponding code that goes along with it.

        switch (expression) {
            case choice1:
                // run this code
                break;

            case choice2:
                // run this code instead
                break;

            // include as many cases as you like

            default:
                // actually, just run this code
                break;
        }

        If there is no break then the execution continues with the next case without any checks.
        Breaks aren't always necessary, but they help make the code future-proof for new additions.
        
        Cases can also be grouped:

            let a = 3;

            switch (a) {
            case 4:
                alert('Right!');
                break;

            case 3: // (*) grouped two cases
            case 5:
                alert('Wrong!');
                alert("Why don't you take a math class?");
                break;

            default:
                alert('The result is strange. Really.');
            }

